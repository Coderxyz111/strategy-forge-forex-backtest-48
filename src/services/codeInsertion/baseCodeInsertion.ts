
export class BaseCodeInsertion {
  static createBasicStrategyWithSnippet(snippet: string, title: string): string {
    return `# Enhanced Strategy with ${title}
# Generated by Strategy Coach

def strategy_logic(data):
    # Calculate EMAs using the TechnicalAnalysis helper
    short_ema = TechnicalAnalysis.ema(data['Close'].tolist(), 12)
    long_ema = TechnicalAnalysis.ema(data['Close'].tolist(), 26)
    
    # ${title}
    ${snippet}
    
    # Enhanced entry/exit logic
    entry = []
    exit = []
    
    for i in range(len(data)):
        if i == 0:
            entry.append(False)
            exit.append(False)
        else:
            # Apply enhanced logic with recommendation
            entry_condition = short_ema[i] > long_ema[i] and short_ema[i-1] <= long_ema[i-1]
            exit_condition = short_ema[i] < long_ema[i] and short_ema[i-1] >= long_ema[i-1]
            
            # Apply trend filter if available
            if 'trend_up' in locals():
                entry_condition = entry_condition and trend_up[i] if i < len(trend_up) else entry_condition
            
            # Apply volatility filter if available
            if 'volatility_threshold' in locals():
                entry_condition = entry_condition and volatility_threshold[i] if i < len(volatility_threshold) else entry_condition
            
            entry.append(entry_condition)
            exit.append(exit_condition)
    
    return {
        'entry': entry,
        'exit': exit,
        'short_ema': short_ema,
        'long_ema': long_ema
    }`;
  }

  static checkSnippetExists(existingCode: string, snippet: string): boolean {
    const snippetCore = snippet.trim().split('\n')[0].trim();
    return existingCode.includes(snippetCore);
  }

  static findStrategyLogicFunction(existingCode: string): RegExpMatchArray | null {
    return existingCode.match(/def strategy_logic\(data\):([\s\S]*?)(?=\n\ndef|\n# Alternative|\n$|$)/);
  }
}
