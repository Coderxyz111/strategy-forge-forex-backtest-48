
export class StrategyCodeInsertion {
  static insertCodeSnippet(existingCode: string, snippet: string, title: string): string {
    console.log('Inserting code snippet:', { title, snippet: snippet.substring(0, 100) + '...' });
    
    if (!existingCode.trim()) {
      // If editor is empty, create a basic strategy structure with the snippet
      return `# Strategy with ${title}
# Generated by Strategy Coach

def strategy_logic(data):
    # ${title}
    ${snippet}
    
    # Basic structure - modify as needed
    entry = []
    exit = []
    
    for i in range(len(data)):
        if i == 0:
            entry.append(False)
            exit.append(False)
        else:
            # Add your entry/exit logic here
            entry.append(False)  # Replace with your entry condition
            exit.append(False)   # Replace with your exit condition
    
    return {
        'entry': entry,
        'exit': exit
    }`;
    }

    // Check if snippet already exists to prevent duplicates
    const snippetCore = snippet.trim().split('\n')[0].trim();
    if (existingCode.includes(snippetCore)) {
      console.log('Snippet already exists, skipping');
      return existingCode;
    }

    // Find the strategy_logic function and insert the snippet
    const functionMatch = existingCode.match(/def strategy_logic\(data\):([\s\S]*?)(?=\n\ndef|\n# Alternative|\n$|$)/);
    
    if (functionMatch) {
      const functionBody = functionMatch[1];
      const insertionPoint = functionBody.search(/(?=\s*entry\s*=|return\s*\{)/);
      
      if (insertionPoint !== -1) {
        // Insert before entry/return logic
        const beforeInsertion = functionBody.substring(0, insertionPoint);
        const afterInsertion = functionBody.substring(insertionPoint);
        
        const newFunctionBody = `${beforeInsertion}
    # ${title} (Strategy Coach Suggestion)
    ${snippet}
    ${afterInsertion}`;

        const result = existingCode.replace(functionMatch[0], `def strategy_logic(data):${newFunctionBody}`);
        console.log('Code insertion successful');
        return result;
      } else {
        // Append at the end of the function body
        const newFunctionBody = `${functionBody}
    
    # ${title} (Strategy Coach Suggestion)
    ${snippet}`;

        const result = existingCode.replace(functionMatch[0], `def strategy_logic(data):${newFunctionBody}`);
        console.log('Code insertion successful (appended)');
        return result;
      }
    } else {
      // Append as a comment at the end if no strategy_logic function found
      const result = `${existingCode}

# ${title} (Strategy Coach Suggestion)
# ${snippet}`;
      console.log('Code insertion as comment');
      return result;
    }
  }

  static insertMultipleSnippets(existingCode: string, snippets: Array<{code: string, title: string}>): string {
    let updatedCode = existingCode;
    
    snippets.forEach((snippet, index) => {
      console.log(`Inserting snippet ${index + 1}/${snippets.length}: ${snippet.title}`);
      updatedCode = this.insertCodeSnippet(updatedCode, snippet.code, snippet.title);
    });
    
    return updatedCode;
  }
}
